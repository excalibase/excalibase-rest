name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  JAVA_VERSION: '21'
  MAVEN_OPTS: '-Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.http.retryHandler.class=standard -Dmaven.wagon.http.retryHandler.count=2'

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        java-version: [21]
        postgres-version: [14, 15, 16]
    
    services:
      postgres:
        image: postgres:${{ matrix.postgres-version }}
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK ${{ matrix.java-version }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ matrix.java-version }}
        distribution: 'temurin'
        cache: maven

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Verify PostgreSQL connection
      run: |
        sudo apt-get -y install postgresql-client
        psql -h localhost -U postgres -d testdb -c "SELECT version();"
      env:
        PGPASSWORD: postgres

    - name: Run unit tests
      run: mvn clean test -Dspring.profiles.active=test
      env:
        SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/testdb
        SPRING_DATASOURCE_USERNAME: postgres
        SPRING_DATASOURCE_PASSWORD: postgres

    - name: Run integration tests
      run: mvn test -Dtest="*IntegrationTest" -Dspring.profiles.active=test
      env:
        SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/testdb
        SPRING_DATASOURCE_USERNAME: postgres
        SPRING_DATASOURCE_PASSWORD: postgres

    - name: Generate test coverage report
      run: mvn jacoco:report

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      if: matrix.java-version == '21' && matrix.postgres-version == '15'
      with:
        file: ./target/site/jacoco/jacoco.xml
        fail_ci_if_error: false
        verbose: true

    - name: Archive test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-java${{ matrix.java-version }}-postgres${{ matrix.postgres-version }}
        path: |
          target/surefire-reports/
          target/site/jacoco/

  build:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven

    - name: Build application
      run: mvn clean package -DskipTests

    - name: Build Docker image
      run: |
        docker build -t excalibase-rest:${{ github.sha }} .
        docker tag excalibase-rest:${{ github.sha }} excalibase-rest:latest

    - name: Archive build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: jar-artifact
        path: target/*.jar

  e2e-test:
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: jar-artifact
        path: target/

    - name: Start services with Docker Compose
      run: |
        # Build the application first
        mvn clean package -DskipTests
        # Start services
        docker-compose up -d
        # Wait for services to be ready
        sleep 60

    - name: Run E2E tests
      run: |
        chmod +x scripts/e2e-test.sh
        ./scripts/e2e-test.sh
      env:
        API_BASE_URL: http://localhost:8080/api/v1

    - name: Check service logs
      if: failure()
      run: |
        echo "=== Application logs ==="
        docker-compose logs excalibase-rest
        echo "=== Database logs ==="
        docker-compose logs postgres

    - name: Stop services
      if: always()
      run: docker-compose down -v

  security-scan:
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven

    - name: Run OWASP Dependency Check
      run: |
        mvn org.owasp:dependency-check-maven:check
      continue-on-error: true

    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-results
        path: target/dependency-check-report.html

  performance-test:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'schedule' || contains(github.event.pull_request.labels.*.name, 'performance')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven

    - name: Build and start services
      run: |
        mvn clean package -DskipTests
        docker-compose up -d
        sleep 60

    - name: Install Apache Bench
      run: sudo apt-get update && sudo apt-get install -y apache2-utils

    - name: Run performance tests
      run: |
        echo "=== Testing GET endpoints ==="
        ab -n 1000 -c 10 http://localhost:8080/api/v1/customers
        
        echo "=== Testing schema endpoint ==="
        ab -n 500 -c 5 http://localhost:8080/api/v1
        
        echo "=== Testing OpenAPI endpoint ==="
        ab -n 100 -c 2 http://localhost:8080/api/v1/openapi.json

    - name: Stop services
      if: always()
      run: docker-compose down -v

  docker-publish:
    runs-on: ubuntu-latest
    needs: [test, build, e2e-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven

    - name: Build application
      run: mvn clean package -DskipTests

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: excalibase/excalibase-rest
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  release:
    runs-on: ubuntu-latest
    needs: [test, build, e2e-test, security-scan]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven

    - name: Build release artifacts
      run: |
        mvn clean package -DskipTests
        mvn javadoc:javadoc

    - name: Create release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: |
          ## Changes
          
          - Auto-generated release from CI/CD pipeline
          - See commit history for detailed changes
          
          ## Artifacts
          
          - JAR file: excalibase-rest-${{ github.ref }}.jar
          - Docker image: excalibase/excalibase-rest:${{ github.ref }}
          
          ## Documentation
          
          - [API Documentation](https://github.com/excalibase/excalibase-rest/blob/main/README.md)
          - [OpenAPI Specification](http://localhost:8080/api/v1/openapi.json)
        draft: false
        prerelease: false

    - name: Upload release assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: target/excalibase-rest-*.jar
        asset_name: excalibase-rest.jar
        asset_content_type: application/java-archive